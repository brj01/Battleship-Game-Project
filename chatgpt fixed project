#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <time.h> // Include time.h for srand

#define SIZE 10
#define MAX_SHIPS 5

typedef struct {
    char name[50];
    bool grid[10][10];
    bool hits[10][10];
    int shipsSunk;
    int radarSweeps;
    int smokeScreens;
} Player;

void initializeGrid(bool grid[10][10]) {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            grid[i][j] = false; 
        }
    }
}

void displayGridHard(bool grid[10][10]) {
    printf("  A B C D E F G H I J\n");
    for (int i = 0; i < 10; i++) {
        printf("%d ", i);
        for (int j = 0; j < 10; j++) {
            printf("%c ", grid[i][j] ? '~' : 'X');
        }
        printf("\n");
    }
}

// Display grid for easy mode (hits and misses are shown)
void displayGridEasy(bool gridHits[10][10], bool shipsLocation[10][10]) {
    printf("  A B C D E F G H I J\n");
    for (int i = 0; i < 10; i++) {
        printf("%d ", i);
        for (int j = 0; j < 10; j++) {
            if (gridHits[i][j]) 
                printf("~ ");
            else if (shipsLocation[i][j]) 
                printf("M ");
            else 
                printf("X ");
        }
        printf("\n");
    }
}

// Check if a ship can be placed at the specified location and orientation
bool canPlaceShip(bool grid[10][10], int row, int col, int size, const char* orientation) {
    if (strcmp(orientation, "vertical") == 0) {
        if (row + size > 10) return false;
        for (int i = 0; i < size; i++) {
            if (grid[row + i][col]) return false;
        }
    } else if (strcmp(orientation, "horizontal") == 0) {
        if (col + size > 10) return false;
        for (int i = 0; i < size; i++) {
            if (grid[row][col + i]) return false;
        }
    }
    return true;
}

// Place the ship on the grid
void placeShip(bool grid[10][10], int row, int col, int size, const char* orientation) {
    if (strcmp(orientation, "vertical") == 0) {
        for (int i = 0; i < size; i++) {
            grid[row + i][col] = true;
        }
    } else {
        for (int i = 0; i < size; i++) {
            grid[row][col + i] = true;
        }
    }
}

// Clears the screen (simulate by printing newlines)
void clearScreen() {
    for (int i = 0; i < 30; i++) printf("\n");
}

void fire(const char *coordinates, bool array[10][10]) {
    int column = coordinates[0] - 'A'; 
    int row = atoi(coordinates + 1) - 1; 
    if (row >= 0 && row < 10 && column >= 0 && column < 10) {
        if (array[row][column]) {
            printf("Hit\n");
            array[row][column] = false; // Mark hit for the opponent
        } else {
            printf("Miss\n");
        }
    } else {
        printf("Invalid coordinates\n");
    }
}

void radarSweep(Player* currentPlayer, const char *coordinates) {
    int column = coordinates[0] - 'A';
    int row = atoi(coordinates + 1) - 1;

    if (currentPlayer->radarSweeps > 0) {
        currentPlayer->radarSweeps--;
        printf("Radar Sweep at %s: %s\n", coordinates, currentPlayer->grid[row][column] ? "Ship detected!" : "No ship detected.");
    } else {
        printf("No radar sweeps left.\n");
    }
}

bool smoke(Player* currentPlayer, const char *coordinates) {
    if (currentPlayer->smokeScreens <= 0) {
        printf("You can't currently use this function\n");
        return false; 
    }
    
    int row = atoi(coordinates + 1) - 1;
    int col = coordinates[0] - 'A';

    if (row + 1 < 10 && col + 1 < 10) {
        currentPlayer->smokeScreens--;
        printf("Smoke screen deployed at %s\n", coordinates);
        return true;
    } else {
        printf("The coordinates of the 2x2 smoke screen are out of bounds\n");
        return false; 
    }
}

bool torpedo(Player* currentPlayer, bool array[10][10], bool hit[10][10]) {
    int rowOrCol;
    printf("Do you want a row (0) or column (1)? ");
    scanf("%d", &rowOrCol);

    if (rowOrCol == 0) {
        int row;
        printf("What row do you want to torpedo? ");
        scanf("%d", &row);

        if (row >= 0 && row < 10) {
            for (int j = 0; j < 10; j++) {
                char coordinates[3];
                snprintf(coordinates, sizeof(coordinates), "%c%d", 'A' + j, row + 1);
                fire(coordinates, array);
                hit[row][j] = true; 
            }
            return true;
        } else {
            printf("Row out of bounds\n");
            return false;
        }
    } else {
        char column[2];
        printf("What column do you want to torpedo? ");
        scanf("%s", column);

        int col = column[0] - 'A';

        if (col >= 0 && col < 10) {
            for (int i = 0; i < 10; i++) {
                char coordinates[3];
                snprintf(coordinates, sizeof(coordinates), "%c%d", col + 'A', i + 1);
                fire(coordinates, array);
                hit[i][col] = true; 
            }
            return true;
        } else {
            printf("Column out of bounds\n");
            return false;
        }
    }
}

bool artillery(Player* currentPlayer, const char *coordinates) {
    int row = atoi(coordinates + 1) - 1;
    int col = coordinates[0] - 'A';

    if (row + 1 < 10 && col + 1 < 10) {
        fire(coordinates, currentPlayer->grid);
        char coords[3];

        snprintf(coords, sizeof(coords), "%c%d", coordinates[0], row + 2); // Below
        fire(coords, currentPlayer->grid);

        snprintf(coords, sizeof(coords), "%c%d", coordinates[0] + 1, row + 1); // Right
        fire(coords, currentPlayer->grid);

        snprintf(coords, sizeof(coords), "%c%d", coordinates[0] + 1, row + 2); // Bottom Right
        fire(coords, currentPlayer->grid);

        return true;
    } else {
        printf("Coordinates are out of bounds\n");
        return false; 
    }
}

int main() {
    Player player1, player2;
    bool gameRunning = true;
    int currentPlayerIndex;
    Player* players[2];
    
    printf("Enter name for Player 1: ");
    scanf("%s", player1.name);
    printf("Enter name for Player 2: ");
    scanf("%s", player2.name);

    initializeGrid(player1.grid);
    initializeGrid(player2.grid);
    player1.radarSweeps = 3;
    player2.radarSweeps = 3;
    player1.smokeScreens = 3;  // Initialize smoke screens
    player2.smokeScreens = 3;  // Initialize smoke screens
    player1.shipsSunk = 0;
    player2.shipsSunk = 0;

    srand(time(NULL)); // Correctly seed the random number generator
    currentPlayerIndex = rand() % 2;
    players[0] = &player1;
    players[1] = &player2;

    for (int i = 0; i < 2; i++) {
        Player* player = players[i];
        printf("%s, place your ships:\n", player->name);
        
        for (int size = 5; size > 1; size--) {
            char orientation[10];
            char coordinate[3];
            while (true) {
                displayGridHard(player->grid);
                printf("Enter coordinate for a %d-cell ship (e.g., B3): ", size);
                scanf("%s", coordinate);
                printf("Vertical or horizontal? ");
                scanf("%s", orientation);
                int row = coordinate[1] - '1';
                int col = coordinate[0] - 'A';

                if (canPlaceShip(player->grid, row, col, size, orientation)) {
                    placeShip(player->grid, row, col, size, orientation);
                    break; 
                } else {
                    printf("Invalid position. Try again.\n");
                }
            }
        }
        printf("All ships placed for %s.\n", player->name);
    }

    while (gameRunning) {
        Player* currentPlayer = players[currentPlayerIndex];
        Player* opponent = players[1 - currentPlayerIndex];

        displayGridEasy(opponent->hits, opponent->grid); 
        printf("%s's turn. Available moves: Fire, Radar, Smoke, Artillery, Torpedo\n", currentPlayer->name);

        char command[50];
        scanf(" %[^\n]", command); 

        if (strcmp(command, "Fire") == 0) {
            char coordinates[3];
            printf("Enter coordinates (e.g., B3): ");
            scanf("%s", coordinates);
            fire(coordinates, opponent->grid);
        } else if (strcmp(command, "Radar") == 0) {
            char coordinates[3];
            printf("Enter coordinates for radar sweep: ");
            scanf("%s", coordinates);
            radarSweep(currentPlayer, coordinates);
        } else if (strcmp(command, "Smoke") == 0) {
            char coordinates[3];
            printf("Enter the top left coordinate of the 2x2 area: ");
            scanf("%s", coordinates);
            smoke(currentPlayer, coordinates);
        } else if (strcmp(command, "Artillery") == 0) {
            char coordinates[3];
            printf("Enter the top left coordinate of the 2x2 area: ");
            scanf("%s", coordinates);
            artillery(currentPlayer, coordinates);
        } else if (strcmp(command, "Torpedo") == 0) {
            torpedo(currentPlayer, opponent->grid, opponent->hits);
        }

        if (opponent->shipsSunk >= MAX_SHIPS) {
            printf("%s wins!\n", currentPlayer->name);
            gameRunning = false;
        }

        currentPlayerIndex = 1 - currentPlayerIndex; // Switch players
    }

    return 0;
}
